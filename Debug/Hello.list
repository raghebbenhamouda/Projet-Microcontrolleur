
Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001174  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001320  08001320  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001320  08001320  00011320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001324  08001324  00011324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002c4  20000000  08001328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000202c4  2**0
                  CONTENTS
  7 .bss          00000134  200002c4  200002c4  000202c4  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200003f8  200003f8  000202c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000040be  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000cc1  00000000  00000000  000243b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000568  00000000  00000000  00025078  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004d0  00000000  00000000  000255e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002041  00000000  00000000  00025ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001d07  00000000  00000000  00027af1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000297f8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000014d0  00000000  00000000  00029874  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002ad44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200002c4 	.word	0x200002c4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001308 	.word	0x08001308

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200002c8 	.word	0x200002c8
 80001e8:	08001308 	.word	0x08001308

080001ec <main>:
#include "SysTick.h"
#include "stm32f4xx_flash.h"


int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  SysTick_Init();
 80001f0:	f000 fa30 	bl	8000654 <SysTick_Init>
  NVIC_Init();
 80001f4:	f000 ffe0 	bl	80011b8 <NVIC_Init>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80001f8:	b662      	cpsie	i

  /* Clear PRIMASK, enable IRQs */
  __enable_irq();

  /* Configuration functions */
  FLASH_USART1_GPIO_Config();
 80001fa:	f000 fcd1 	bl	8000ba0 <FLASH_USART1_GPIO_Config>
  FLASH_USART1_Init();
 80001fe:	f000 fdf1 	bl	8000de4 <FLASH_USART1_Init>
  FLASH_USART1_TX_DMA_Config();
 8000202:	f000 fd15 	bl	8000c30 <FLASH_USART1_TX_DMA_Config>
  FLASH_USART1_RX_DMA_Config();
 8000206:	f000 fd7f 	bl	8000d08 <FLASH_USART1_RX_DMA_Config>
  FLASH_USART1_Enable();
 800020a:	f000 fdfd 	bl	8000e08 <FLASH_USART1_Enable>
  FLASH_Init();
 800020e:	f000 feb3 	bl	8000f78 <FLASH_Init>

  /* Infinite loop */
  while(1)
  {
    /* Main Function */
    FLASH_Main();
 8000212:	f000 fed7 	bl	8000fc4 <FLASH_Main>
 8000216:	e7fc      	b.n	8000212 <main+0x26>

08000218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000218:	f8df d038 	ldr.w	sp, [pc, #56]	; 8000254 <LoopFillZerobss+0x16>
  
  /* Disable interrupt (set PRIMASK) */
  CPSID i
 800021c:	b672      	cpsid	i
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800021e:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000220:	e003      	b.n	800022a <LoopCopyDataInit>

08000222 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000222:	4b0d      	ldr	r3, [pc, #52]	; (8000258 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8000224:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000226:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000228:	3104      	adds	r1, #4

0800022a <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800022a:	480c      	ldr	r0, [pc, #48]	; (800025c <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 800022c:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 800022e:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000230:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000232:	d3f6      	bcc.n	8000222 <CopyDataInit>
  ldr  r2, =_sbss
 8000234:	4a0b      	ldr	r2, [pc, #44]	; (8000264 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8000236:	e002      	b.n	800023e <LoopFillZerobss>

08000238 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000238:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800023a:	f842 3b04 	str.w	r3, [r2], #4

0800023e <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800023e:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8000240:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000242:	d3f9      	bcc.n	8000238 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000244:	f000 f85a 	bl	80002fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000248:	f001 f83a 	bl	80012c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800024c:	f7ff ffce 	bl	80001ec <main>
  bx  lr    
 8000250:	4770      	bx	lr
 8000252:	0000      	.short	0x0000
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000254:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000258:	08001328 	.word	0x08001328
  ldr  r0, =_sdata
 800025c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000260:	200002c4 	.word	0x200002c4
  ldr  r2, =_sbss
 8000264:	200002c4 	.word	0x200002c4
  ldr  r3, = _ebss
 8000268:	200003f8 	.word	0x200003f8

0800026c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800026c:	e7fe      	b.n	800026c <ADC_IRQHandler>

0800026e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800026e:	b480      	push	{r7}
 8000270:	af00      	add	r7, sp, #0
}
 8000272:	bf00      	nop
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000280:	e7fe      	b.n	8000280 <HardFault_Handler+0x4>

08000282 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000282:	b480      	push	{r7}
 8000284:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000286:	e7fe      	b.n	8000286 <MemManage_Handler+0x4>

08000288 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800028c:	e7fe      	b.n	800028c <BusFault_Handler+0x4>

0800028e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800028e:	b480      	push	{r7}
 8000290:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000292:	e7fe      	b.n	8000292 <UsageFault_Handler+0x4>

08000294 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr

080002a2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80002a2:	b480      	push	{r7}
 80002a4:	af00      	add	r7, sp, #0
}
 80002a6:	bf00      	nop
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr

080002b0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80002be:	b580      	push	{r7, lr}
 80002c0:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
	SysTick_IncrementTicks_cb();
 80002c2:	f000 f9b9 	bl	8000638 <SysTick_IncrementTicks_cb>
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}

080002ca <EXTI3_IRQHandler>:
/*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32f40xx.s/startup_stm32f427x.s).                         */
/******************************************************************************/
void EXTI3_IRQHandler(void)
{
 80002ca:	b480      	push	{r7}
 80002cc:	af00      	add	r7, sp, #0

}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr

080002d8 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  FLASH_USART1_RX_DMA_IRQ_Callback();
 80002dc:	f000 fe0a 	bl	8000ef4 <FLASH_USART1_RX_DMA_IRQ_Callback>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  FLASH_USART1_TX_DMA_IRQ_Callback();
 80002e8:	f000 fdf0 	bl	8000ecc <FLASH_USART1_TX_DMA_IRQ_Callback>
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  FLASH_USART1_IRQ_Callback();
 80002f4:	f000 fdd0 	bl	8000e98 <FLASH_USART1_IRQ_Callback>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}

080002fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000300:	4a16      	ldr	r2, [pc, #88]	; (800035c <SystemInit+0x60>)
 8000302:	4b16      	ldr	r3, [pc, #88]	; (800035c <SystemInit+0x60>)
 8000304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800030c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000310:	4a13      	ldr	r2, [pc, #76]	; (8000360 <SystemInit+0x64>)
 8000312:	4b13      	ldr	r3, [pc, #76]	; (8000360 <SystemInit+0x64>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f043 0301 	orr.w	r3, r3, #1
 800031a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800031c:	4b10      	ldr	r3, [pc, #64]	; (8000360 <SystemInit+0x64>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000322:	4a0f      	ldr	r2, [pc, #60]	; (8000360 <SystemInit+0x64>)
 8000324:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <SystemInit+0x64>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800032c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000330:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000332:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <SystemInit+0x64>)
 8000334:	4a0b      	ldr	r2, [pc, #44]	; (8000364 <SystemInit+0x68>)
 8000336:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000338:	4a09      	ldr	r2, [pc, #36]	; (8000360 <SystemInit+0x64>)
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <SystemInit+0x64>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000342:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <SystemInit+0x64>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800034a:	f000 f889 	bl	8000460 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800034e:	4b03      	ldr	r3, [pc, #12]	; (800035c <SystemInit+0x60>)
 8000350:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000354:	609a      	str	r2, [r3, #8]
#endif
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	e000ed00 	.word	0xe000ed00
 8000360:	40023800 	.word	0x40023800
 8000364:	24003010 	.word	0x24003010

08000368 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b087      	sub	sp, #28
 800036c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800036e:	2300      	movs	r3, #0
 8000370:	613b      	str	r3, [r7, #16]
 8000372:	2300      	movs	r3, #0
 8000374:	617b      	str	r3, [r7, #20]
 8000376:	2302      	movs	r3, #2
 8000378:	60fb      	str	r3, [r7, #12]
 800037a:	2300      	movs	r3, #0
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	2302      	movs	r3, #2
 8000380:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000382:	4b32      	ldr	r3, [pc, #200]	; (800044c <SystemCoreClockUpdate+0xe4>)
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	f003 030c 	and.w	r3, r3, #12
 800038a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800038c:	693b      	ldr	r3, [r7, #16]
 800038e:	2b04      	cmp	r3, #4
 8000390:	d007      	beq.n	80003a2 <SystemCoreClockUpdate+0x3a>
 8000392:	2b08      	cmp	r3, #8
 8000394:	d009      	beq.n	80003aa <SystemCoreClockUpdate+0x42>
 8000396:	2b00      	cmp	r3, #0
 8000398:	d13d      	bne.n	8000416 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800039a:	4b2d      	ldr	r3, [pc, #180]	; (8000450 <SystemCoreClockUpdate+0xe8>)
 800039c:	4a2d      	ldr	r2, [pc, #180]	; (8000454 <SystemCoreClockUpdate+0xec>)
 800039e:	601a      	str	r2, [r3, #0]
      break;
 80003a0:	e03d      	b.n	800041e <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80003a2:	4b2b      	ldr	r3, [pc, #172]	; (8000450 <SystemCoreClockUpdate+0xe8>)
 80003a4:	4a2c      	ldr	r2, [pc, #176]	; (8000458 <SystemCoreClockUpdate+0xf0>)
 80003a6:	601a      	str	r2, [r3, #0]
      break;
 80003a8:	e039      	b.n	800041e <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80003aa:	4b28      	ldr	r3, [pc, #160]	; (800044c <SystemCoreClockUpdate+0xe4>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	0d9b      	lsrs	r3, r3, #22
 80003b0:	f003 0301 	and.w	r3, r3, #1
 80003b4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80003b6:	4b25      	ldr	r3, [pc, #148]	; (800044c <SystemCoreClockUpdate+0xe4>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003be:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d00c      	beq.n	80003e0 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80003c6:	4a24      	ldr	r2, [pc, #144]	; (8000458 <SystemCoreClockUpdate+0xf0>)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ce:	4a1f      	ldr	r2, [pc, #124]	; (800044c <SystemCoreClockUpdate+0xe4>)
 80003d0:	6852      	ldr	r2, [r2, #4]
 80003d2:	0992      	lsrs	r2, r2, #6
 80003d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80003d8:	fb02 f303 	mul.w	r3, r2, r3
 80003dc:	617b      	str	r3, [r7, #20]
 80003de:	e00b      	b.n	80003f8 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80003e0:	4a1c      	ldr	r2, [pc, #112]	; (8000454 <SystemCoreClockUpdate+0xec>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003e8:	4a18      	ldr	r2, [pc, #96]	; (800044c <SystemCoreClockUpdate+0xe4>)
 80003ea:	6852      	ldr	r2, [r2, #4]
 80003ec:	0992      	lsrs	r2, r2, #6
 80003ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80003f2:	fb02 f303 	mul.w	r3, r2, r3
 80003f6:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80003f8:	4b14      	ldr	r3, [pc, #80]	; (800044c <SystemCoreClockUpdate+0xe4>)
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	0c1b      	lsrs	r3, r3, #16
 80003fe:	f003 0303 	and.w	r3, r3, #3
 8000402:	3301      	adds	r3, #1
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000408:	697a      	ldr	r2, [r7, #20]
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000410:	4a0f      	ldr	r2, [pc, #60]	; (8000450 <SystemCoreClockUpdate+0xe8>)
 8000412:	6013      	str	r3, [r2, #0]
      break;
 8000414:	e003      	b.n	800041e <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <SystemCoreClockUpdate+0xe8>)
 8000418:	4a0e      	ldr	r2, [pc, #56]	; (8000454 <SystemCoreClockUpdate+0xec>)
 800041a:	601a      	str	r2, [r3, #0]
      break;
 800041c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <SystemCoreClockUpdate+0xe4>)
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	091b      	lsrs	r3, r3, #4
 8000424:	f003 030f 	and.w	r3, r3, #15
 8000428:	4a0c      	ldr	r2, [pc, #48]	; (800045c <SystemCoreClockUpdate+0xf4>)
 800042a:	5cd3      	ldrb	r3, [r2, r3]
 800042c:	b2db      	uxtb	r3, r3
 800042e:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000430:	4b07      	ldr	r3, [pc, #28]	; (8000450 <SystemCoreClockUpdate+0xe8>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	693b      	ldr	r3, [r7, #16]
 8000436:	fa22 f303 	lsr.w	r3, r2, r3
 800043a:	4a05      	ldr	r2, [pc, #20]	; (8000450 <SystemCoreClockUpdate+0xe8>)
 800043c:	6013      	str	r3, [r2, #0]
}
 800043e:	bf00      	nop
 8000440:	371c      	adds	r7, #28
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40023800 	.word	0x40023800
 8000450:	20000000 	.word	0x20000000
 8000454:	00f42400 	.word	0x00f42400
 8000458:	007a1200 	.word	0x007a1200
 800045c:	20000004 	.word	0x20000004

08000460 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	607b      	str	r3, [r7, #4]
 800046a:	2300      	movs	r3, #0
 800046c:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800046e:	4a36      	ldr	r2, [pc, #216]	; (8000548 <SetSysClock+0xe8>)
 8000470:	4b35      	ldr	r3, [pc, #212]	; (8000548 <SetSysClock+0xe8>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000478:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800047a:	4b33      	ldr	r3, [pc, #204]	; (8000548 <SetSysClock+0xe8>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000482:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	3301      	adds	r3, #1
 8000488:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d103      	bne.n	8000498 <SetSysClock+0x38>
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000496:	d1f0      	bne.n	800047a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000498:	4b2b      	ldr	r3, [pc, #172]	; (8000548 <SetSysClock+0xe8>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d002      	beq.n	80004aa <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80004a4:	2301      	movs	r3, #1
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	e001      	b.n	80004ae <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80004aa:	2300      	movs	r3, #0
 80004ac:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d102      	bne.n	80004ba <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80004b4:	4b24      	ldr	r3, [pc, #144]	; (8000548 <SetSysClock+0xe8>)
 80004b6:	4a25      	ldr	r2, [pc, #148]	; (800054c <SetSysClock+0xec>)
 80004b8:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80004ba:	4a23      	ldr	r2, [pc, #140]	; (8000548 <SetSysClock+0xe8>)
 80004bc:	4b22      	ldr	r3, [pc, #136]	; (8000548 <SetSysClock+0xe8>)
 80004be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c4:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80004c6:	4a22      	ldr	r2, [pc, #136]	; (8000550 <SetSysClock+0xf0>)
 80004c8:	4b21      	ldr	r3, [pc, #132]	; (8000550 <SetSysClock+0xf0>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004d0:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80004d2:	4a1d      	ldr	r2, [pc, #116]	; (8000548 <SetSysClock+0xe8>)
 80004d4:	4b1c      	ldr	r3, [pc, #112]	; (8000548 <SetSysClock+0xe8>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80004da:	4a1b      	ldr	r2, [pc, #108]	; (8000548 <SetSysClock+0xe8>)
 80004dc:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <SetSysClock+0xe8>)
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004e4:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80004e6:	4a18      	ldr	r2, [pc, #96]	; (8000548 <SetSysClock+0xe8>)
 80004e8:	4b17      	ldr	r3, [pc, #92]	; (8000548 <SetSysClock+0xe8>)
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80004f0:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80004f2:	4a15      	ldr	r2, [pc, #84]	; (8000548 <SetSysClock+0xe8>)
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <SetSysClock+0xe8>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004fc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80004fe:	bf00      	nop
 8000500:	4b11      	ldr	r3, [pc, #68]	; (8000548 <SetSysClock+0xe8>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000508:	2b00      	cmp	r3, #0
 800050a:	d0f9      	beq.n	8000500 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <SetSysClock+0xf4>)
 800050e:	f240 7205 	movw	r2, #1797	; 0x705
 8000512:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000514:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <SetSysClock+0xe8>)
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <SetSysClock+0xe8>)
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	f023 0303 	bic.w	r3, r3, #3
 800051e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000520:	4a09      	ldr	r2, [pc, #36]	; (8000548 <SetSysClock+0xe8>)
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <SetSysClock+0xe8>)
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	f043 0302 	orr.w	r3, r3, #2
 800052a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800052c:	bf00      	nop
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <SetSysClock+0xe8>)
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	f003 030c 	and.w	r3, r3, #12
 8000536:	2b08      	cmp	r3, #8
 8000538:	d1f9      	bne.n	800052e <SetSysClock+0xce>
    {
    }
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40023800 	.word	0x40023800
 800054c:	07405a08 	.word	0x07405a08
 8000550:	40007000 	.word	0x40007000
 8000554:	40023c00 	.word	0x40023c00

08000558 <DMA1_Stream2_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_RX_IRQHandler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF) != RESET)
 800055c:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8000560:	480c      	ldr	r0, [pc, #48]	; (8000594 <DMA1_Stream2_IRQHandler+0x3c>)
 8000562:	f000 f8b7 	bl	80006d4 <DMA_GetFlagStatus>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d010      	beq.n	800058e <DMA1_Stream2_IRQHandler+0x36>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);    
 800056c:	2101      	movs	r1, #1
 800056e:	480a      	ldr	r0, [pc, #40]	; (8000598 <DMA1_Stream2_IRQHandler+0x40>)
 8000570:	f000 fd9a 	bl	80010a8 <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Stream and Clear TC Flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 8000574:	2100      	movs	r1, #0
 8000576:	4807      	ldr	r0, [pc, #28]	; (8000594 <DMA1_Stream2_IRQHandler+0x3c>)
 8000578:	f000 f890 	bl	800069c <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF);
 800057c:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <DMA1_Stream2_IRQHandler+0x3c>)
 8000582:	f000 f8e3 	bl	800074c <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *sEEDataReadPointer = 0;
 8000586:	4b05      	ldr	r3, [pc, #20]	; (800059c <DMA1_Stream2_IRQHandler+0x44>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2200      	movs	r2, #0
 800058c:	801a      	strh	r2, [r3, #0]
  }
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40026040 	.word	0x40026040
 8000598:	40005c00 	.word	0x40005c00
 800059c:	200003f4 	.word	0x200003f4

080005a0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80005ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	da0b      	bge.n	80005cc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80005b4:	490d      	ldr	r1, [pc, #52]	; (80005ec <NVIC_SetPriority+0x4c>)
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	f003 030f 	and.w	r3, r3, #15
 80005bc:	3b04      	subs	r3, #4
 80005be:	683a      	ldr	r2, [r7, #0]
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	0112      	lsls	r2, r2, #4
 80005c4:	b2d2      	uxtb	r2, r2
 80005c6:	440b      	add	r3, r1
 80005c8:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80005ca:	e009      	b.n	80005e0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80005cc:	4908      	ldr	r1, [pc, #32]	; (80005f0 <NVIC_SetPriority+0x50>)
 80005ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d2:	683a      	ldr	r2, [r7, #0]
 80005d4:	b2d2      	uxtb	r2, r2
 80005d6:	0112      	lsls	r2, r2, #4
 80005d8:	b2d2      	uxtb	r2, r2
 80005da:	440b      	add	r3, r1
 80005dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000ed00 	.word	0xe000ed00
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3b01      	subs	r3, #1
 8000600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000604:	d301      	bcc.n	800060a <SysTick_Config+0x16>
 8000606:	2301      	movs	r3, #1
 8000608:	e00f      	b.n	800062a <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800060a:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <SysTick_Config+0x40>)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3b01      	subs	r3, #1
 8000610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000612:	210f      	movs	r1, #15
 8000614:	f04f 30ff 	mov.w	r0, #4294967295
 8000618:	f7ff ffc2 	bl	80005a0 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <SysTick_Config+0x40>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000622:	4b04      	ldr	r3, [pc, #16]	; (8000634 <SysTick_Config+0x40>)
 8000624:	2207      	movs	r2, #7
 8000626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	e000e010 	.word	0xe000e010

08000638 <SysTick_IncrementTicks_cb>:


volatile uint32_t SysTickCounter = 0;

void SysTick_IncrementTicks_cb(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  ++SysTickCounter;
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <SysTick_IncrementTicks_cb+0x18>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	3301      	adds	r3, #1
 8000642:	4a03      	ldr	r2, [pc, #12]	; (8000650 <SysTick_IncrementTicks_cb+0x18>)
 8000644:	6013      	str	r3, [r2, #0]
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	200002e0 	.word	0x200002e0

08000654 <SysTick_Init>:
  {

  }
}
void SysTick_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
  uint32_t returnCode;

  /* Update clock configuration */
  SystemCoreClockUpdate();
 800065a:	f7ff fe85 	bl	8000368 <SystemCoreClockUpdate>

  /* Check clock configuration */
  if(SystemCoreClock != (uint32_t) 180000000)
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <SysTick_Init+0x3c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <SysTick_Init+0x40>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d000      	beq.n	800066a <SysTick_Init+0x16>
  {
    /* Clock configuration is not OK */
    while(1)
 8000668:	e7fe      	b.n	8000668 <SysTick_Init+0x14>
  {
    /* Clock configuration is OK */
  }

  /* Configure SysTick to generate an interrupt every millisecond */
  returnCode = SysTick_Config(SystemCoreClock / 1000);
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <SysTick_Init+0x3c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <SysTick_Init+0x44>)
 8000670:	fba2 2303 	umull	r2, r3, r2, r3
 8000674:	099b      	lsrs	r3, r3, #6
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ffbc 	bl	80005f4 <SysTick_Config>
 800067c:	6078      	str	r0, [r7, #4]

  /* Check return code for errors */
  if (returnCode != 0)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d000      	beq.n	8000686 <SysTick_Init+0x32>
  {
    /* SysTick configuration failed */
    while(1)
 8000684:	e7fe      	b.n	8000684 <SysTick_Init+0x30>
  }
  else
  {
    /* Do nothing, SysTick configuration OK */
  }
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000000 	.word	0x20000000
 8000694:	0aba9500 	.word	0x0aba9500
 8000698:	10624dd3 	.word	0x10624dd3

0800069c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006a8:	78fb      	ldrb	r3, [r7, #3]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d006      	beq.n	80006bc <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f043 0201 	orr.w	r2, r3, #1
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80006ba:	e005      	b.n	80006c8 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f023 0201 	bic.w	r2, r3, #1
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	601a      	str	r2, [r3, #0]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b087      	sub	sp, #28
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80006de:	2300      	movs	r3, #0
 80006e0:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a15      	ldr	r2, [pc, #84]	; (8000740 <DMA_GetFlagStatus+0x6c>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d802      	bhi.n	80006f4 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <DMA_GetFlagStatus+0x70>)
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	e001      	b.n	80006f8 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <DMA_GetFlagStatus+0x74>)
 80006f6:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d003      	beq.n	800070a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	e002      	b.n	8000710 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000716:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800071a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	4013      	ands	r3, r2
 8000722:	2b00      	cmp	r3, #0
 8000724:	d002      	beq.n	800072c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000726:	2301      	movs	r3, #1
 8000728:	75fb      	strb	r3, [r7, #23]
 800072a:	e001      	b.n	8000730 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800072c:	2300      	movs	r3, #0
 800072e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000730:	7dfb      	ldrb	r3, [r7, #23]
}
 8000732:	4618      	mov	r0, r3
 8000734:	371c      	adds	r7, #28
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	4002640f 	.word	0x4002640f
 8000744:	40026000 	.word	0x40026000
 8000748:	40026400 	.word	0x40026400

0800074c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a10      	ldr	r2, [pc, #64]	; (800079c <DMA_ClearFlag+0x50>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d802      	bhi.n	8000764 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <DMA_ClearFlag+0x54>)
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	e001      	b.n	8000768 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <DMA_ClearFlag+0x58>)
 8000766:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800076e:	2b00      	cmp	r3, #0
 8000770:	d007      	beq.n	8000782 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000778:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800077c:	68fa      	ldr	r2, [r7, #12]
 800077e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000780:	e006      	b.n	8000790 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000788:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	6093      	str	r3, [r2, #8]
}
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	4002640f 	.word	0x4002640f
 80007a0:	40026000 	.word	0x40026000
 80007a4:	40026400 	.word	0x40026400

080007a8 <check_errors>:
 * @brief   Check flash errors
 * @param   none
 * @retval  none
 */
static void check_errors()
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  if(FLASH_SR_PGSERR == (FLASH->SR & FLASH_SR_PGSERR))
 80007ac:	4b28      	ldr	r3, [pc, #160]	; (8000850 <check_errors+0xa8>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b4:	2b80      	cmp	r3, #128	; 0x80
 80007b6:	d10d      	bne.n	80007d4 <check_errors+0x2c>
  {
    /* Programming sequence error */
    strTransmit(error_PGSERR, sizeof(error_PGSERR));
 80007b8:	211b      	movs	r1, #27
 80007ba:	4826      	ldr	r0, [pc, #152]	; (8000854 <check_errors+0xac>)
 80007bc:	f000 f9c6 	bl	8000b4c <strTransmit>
    strTransmit(line, sizeof(line));
 80007c0:	212f      	movs	r1, #47	; 0x2f
 80007c2:	4825      	ldr	r0, [pc, #148]	; (8000858 <check_errors+0xb0>)
 80007c4:	f000 f9c2 	bl	8000b4c <strTransmit>

    /* Clear */
    FLASH->SR |= FLASH_SR_PGSERR;
 80007c8:	4a21      	ldr	r2, [pc, #132]	; (8000850 <check_errors+0xa8>)
 80007ca:	4b21      	ldr	r3, [pc, #132]	; (8000850 <check_errors+0xa8>)
 80007cc:	68db      	ldr	r3, [r3, #12]
 80007ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d2:	60d3      	str	r3, [r2, #12]
  else
  {
    /* Do nothing */
  }

  if(FLASH_SR_PGPERR == (FLASH->SR & FLASH_SR_PGPERR))
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <check_errors+0xa8>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007dc:	2b40      	cmp	r3, #64	; 0x40
 80007de:	d10d      	bne.n	80007fc <check_errors+0x54>
  {
    /* Programming parallelism error */
    strTransmit(error_PGPERR, sizeof(error_PGPERR));
 80007e0:	211e      	movs	r1, #30
 80007e2:	481e      	ldr	r0, [pc, #120]	; (800085c <check_errors+0xb4>)
 80007e4:	f000 f9b2 	bl	8000b4c <strTransmit>
    strTransmit(line, sizeof(line));
 80007e8:	212f      	movs	r1, #47	; 0x2f
 80007ea:	481b      	ldr	r0, [pc, #108]	; (8000858 <check_errors+0xb0>)
 80007ec:	f000 f9ae 	bl	8000b4c <strTransmit>

    /* Clear */
    FLASH->SR |= FLASH_SR_PGPERR;
 80007f0:	4a17      	ldr	r2, [pc, #92]	; (8000850 <check_errors+0xa8>)
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <check_errors+0xa8>)
 80007f4:	68db      	ldr	r3, [r3, #12]
 80007f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007fa:	60d3      	str	r3, [r2, #12]
  else
  {
    /* Do nothing */
  }

  if(FLASH_SR_PGAERR == (FLASH->SR & FLASH_SR_PGAERR))
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <check_errors+0xa8>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	f003 0320 	and.w	r3, r3, #32
 8000804:	2b20      	cmp	r3, #32
 8000806:	d10d      	bne.n	8000824 <check_errors+0x7c>
  {
    /* Programming alignment error */
    strTransmit(error_PGAERR, sizeof(error_PGAERR));
 8000808:	211c      	movs	r1, #28
 800080a:	4815      	ldr	r0, [pc, #84]	; (8000860 <check_errors+0xb8>)
 800080c:	f000 f99e 	bl	8000b4c <strTransmit>
    strTransmit(line, sizeof(line));
 8000810:	212f      	movs	r1, #47	; 0x2f
 8000812:	4811      	ldr	r0, [pc, #68]	; (8000858 <check_errors+0xb0>)
 8000814:	f000 f99a 	bl	8000b4c <strTransmit>

    /* Clear */
    FLASH->SR |= FLASH_SR_PGAERR;
 8000818:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <check_errors+0xa8>)
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <check_errors+0xa8>)
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	f043 0320 	orr.w	r3, r3, #32
 8000822:	60d3      	str	r3, [r2, #12]
  else
  {
    /* Do nothing */
  }

  if(FLASH_SR_WRPERR == (FLASH->SR & FLASH_SR_WRPERR))
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <check_errors+0xa8>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	f003 0310 	and.w	r3, r3, #16
 800082c:	2b10      	cmp	r3, #16
 800082e:	d10d      	bne.n	800084c <check_errors+0xa4>
  {
    /* Write protection error */
    strTransmit(error_WRPERR, sizeof(error_WRPERR));
 8000830:	2117      	movs	r1, #23
 8000832:	480c      	ldr	r0, [pc, #48]	; (8000864 <check_errors+0xbc>)
 8000834:	f000 f98a 	bl	8000b4c <strTransmit>
    strTransmit(line, sizeof(line));
 8000838:	212f      	movs	r1, #47	; 0x2f
 800083a:	4807      	ldr	r0, [pc, #28]	; (8000858 <check_errors+0xb0>)
 800083c:	f000 f986 	bl	8000b4c <strTransmit>

    /* Clear */
    FLASH->SR |= FLASH_SR_WRPERR;
 8000840:	4a03      	ldr	r2, [pc, #12]	; (8000850 <check_errors+0xa8>)
 8000842:	4b03      	ldr	r3, [pc, #12]	; (8000850 <check_errors+0xa8>)
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	f043 0310 	orr.w	r3, r3, #16
 800084a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* Do nothing */
  }
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023c00 	.word	0x40023c00
 8000854:	20000138 	.word	0x20000138
 8000858:	20000108 	.word	0x20000108
 800085c:	20000154 	.word	0x20000154
 8000860:	20000174 	.word	0x20000174
 8000864:	20000190 	.word	0x20000190

08000868 <process_command>:
 * @brief   Process flash command
 * @param   none
 * @retval  none
 */
static void process_command()
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
  uint32_t address = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
  uint32_t data = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
  uint32_t val = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]

  /* Process received command */
  switch (RxBuffer[0])
 800087a:	4ba3      	ldr	r3, [pc, #652]	; (8000b08 <process_command+0x2a0>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	3b01      	subs	r3, #1
 8000880:	2b08      	cmp	r3, #8
 8000882:	f200 813b 	bhi.w	8000afc <process_command+0x294>
 8000886:	a201      	add	r2, pc, #4	; (adr r2, 800088c <process_command+0x24>)
 8000888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088c:	080008b1 	.word	0x080008b1
 8000890:	080008cf 	.word	0x080008cf
 8000894:	080008ed 	.word	0x080008ed
 8000898:	08000945 	.word	0x08000945
 800089c:	0800095d 	.word	0x0800095d
 80008a0:	080009d1 	.word	0x080009d1
 80008a4:	08000a4b 	.word	0x08000a4b
 80008a8:	08000ac1 	.word	0x08000ac1
 80008ac:	08000adf 	.word	0x08000adf
  {
    case 1: /* Flash Lock */
      /* Write lock bit */
      FLASH->CR |= FLASH_CR_LOCK;
 80008b0:	4a96      	ldr	r2, [pc, #600]	; (8000b0c <process_command+0x2a4>)
 80008b2:	4b96      	ldr	r3, [pc, #600]	; (8000b0c <process_command+0x2a4>)
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008ba:	6113      	str	r3, [r2, #16]

      strTransmit(locked, sizeof(locked));
 80008bc:	211e      	movs	r1, #30
 80008be:	4894      	ldr	r0, [pc, #592]	; (8000b10 <process_command+0x2a8>)
 80008c0:	f000 f944 	bl	8000b4c <strTransmit>
      strTransmit(line, sizeof(line));
 80008c4:	212f      	movs	r1, #47	; 0x2f
 80008c6:	4893      	ldr	r0, [pc, #588]	; (8000b14 <process_command+0x2ac>)
 80008c8:	f000 f940 	bl	8000b4c <strTransmit>
      break;
 80008cc:	e117      	b.n	8000afe <process_command+0x296>

    case 2: /* Flash Unlock */
      /* Write KEY1 */
      FLASH->KEYR = 0x45670123;
 80008ce:	4b8f      	ldr	r3, [pc, #572]	; (8000b0c <process_command+0x2a4>)
 80008d0:	4a91      	ldr	r2, [pc, #580]	; (8000b18 <process_command+0x2b0>)
 80008d2:	605a      	str	r2, [r3, #4]

      /* Write KEY2 */
      FLASH->KEYR = 0xCDEF89AB;
 80008d4:	4b8d      	ldr	r3, [pc, #564]	; (8000b0c <process_command+0x2a4>)
 80008d6:	4a91      	ldr	r2, [pc, #580]	; (8000b1c <process_command+0x2b4>)
 80008d8:	605a      	str	r2, [r3, #4]

      strTransmit(unlocked, sizeof(unlocked));
 80008da:	2120      	movs	r1, #32
 80008dc:	4890      	ldr	r0, [pc, #576]	; (8000b20 <process_command+0x2b8>)
 80008de:	f000 f935 	bl	8000b4c <strTransmit>
      strTransmit(line, sizeof(line));
 80008e2:	212f      	movs	r1, #47	; 0x2f
 80008e4:	488b      	ldr	r0, [pc, #556]	; (8000b14 <process_command+0x2ac>)
 80008e6:	f000 f931 	bl	8000b4c <strTransmit>
      break;
 80008ea:	e108      	b.n	8000afe <process_command+0x296>

    case 3: /* Write Data */
      /* Wait bsy flag */
      while(0 != (FLASH->SR & FLASH_SR_BSY))
 80008ec:	bf00      	nop
 80008ee:	4b87      	ldr	r3, [pc, #540]	; (8000b0c <process_command+0x2a4>)
 80008f0:	68db      	ldr	r3, [r3, #12]
 80008f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1f9      	bne.n	80008ee <process_command+0x86>
      {
        /* Waiting */
      }

      /* Enable flash programming */
      FLASH->CR |= FLASH_CR_PG;
 80008fa:	4a84      	ldr	r2, [pc, #528]	; (8000b0c <process_command+0x2a4>)
 80008fc:	4b83      	ldr	r3, [pc, #524]	; (8000b0c <process_command+0x2a4>)
 80008fe:	691b      	ldr	r3, [r3, #16]
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6113      	str	r3, [r2, #16]

      /* Write data into flash */
      address = * (uint32_t *) &RxBuffer[1];
 8000906:	4b87      	ldr	r3, [pc, #540]	; (8000b24 <process_command+0x2bc>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	60bb      	str	r3, [r7, #8]
      data = * (uint32_t *) &RxBuffer[5];
 800090c:	4b86      	ldr	r3, [pc, #536]	; (8000b28 <process_command+0x2c0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	607b      	str	r3, [r7, #4]

      *(volatile uint32_t*)(address) = data;
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	601a      	str	r2, [r3, #0]

      /* Wait bsy flag */
      while(0 != (FLASH->SR & FLASH_SR_BSY))
 8000918:	bf00      	nop
 800091a:	4b7c      	ldr	r3, [pc, #496]	; (8000b0c <process_command+0x2a4>)
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000922:	2b00      	cmp	r3, #0
 8000924:	d1f9      	bne.n	800091a <process_command+0xb2>
      {
        /* Waiting */
      }

      /* Disable flash programming */
      FLASH->CR &= ~FLASH_CR_PG;
 8000926:	4a79      	ldr	r2, [pc, #484]	; (8000b0c <process_command+0x2a4>)
 8000928:	4b78      	ldr	r3, [pc, #480]	; (8000b0c <process_command+0x2a4>)
 800092a:	691b      	ldr	r3, [r3, #16]
 800092c:	f023 0301 	bic.w	r3, r3, #1
 8000930:	6113      	str	r3, [r2, #16]

      strTransmit(programmed, sizeof(programmed));
 8000932:	2125      	movs	r1, #37	; 0x25
 8000934:	487d      	ldr	r0, [pc, #500]	; (8000b2c <process_command+0x2c4>)
 8000936:	f000 f909 	bl	8000b4c <strTransmit>
      strTransmit(line, sizeof(line));
 800093a:	212f      	movs	r1, #47	; 0x2f
 800093c:	4875      	ldr	r0, [pc, #468]	; (8000b14 <process_command+0x2ac>)
 800093e:	f000 f905 	bl	8000b4c <strTransmit>
      break;
 8000942:	e0dc      	b.n	8000afe <process_command+0x296>

    case 4: /* Read Data */
      /* 4 00 00 1E 08 */
      address = * (uint32_t *) &RxBuffer[1];
 8000944:	4b77      	ldr	r3, [pc, #476]	; (8000b24 <process_command+0x2bc>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	60bb      	str	r3, [r7, #8]
      val = * (uint32_t *) address;
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	603b      	str	r3, [r7, #0]

      strTransmit((char *)&val, sizeof(val));
 8000950:	463b      	mov	r3, r7
 8000952:	2104      	movs	r1, #4
 8000954:	4618      	mov	r0, r3
 8000956:	f000 f8f9 	bl	8000b4c <strTransmit>
      break;
 800095a:	e0d0      	b.n	8000afe <process_command+0x296>

    case 5: /* Sector Erase */
      /* Wait bsy flag */
      while(0 != (FLASH->SR & FLASH_SR_BSY))
 800095c:	bf00      	nop
 800095e:	4b6b      	ldr	r3, [pc, #428]	; (8000b0c <process_command+0x2a4>)
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000966:	2b00      	cmp	r3, #0
 8000968:	d1f9      	bne.n	800095e <process_command+0xf6>
      {
        /* Waiting */
      }

      /* Select sector erase */
      FLASH->CR |= FLASH_CR_SER;
 800096a:	4a68      	ldr	r2, [pc, #416]	; (8000b0c <process_command+0x2a4>)
 800096c:	4b67      	ldr	r3, [pc, #412]	; (8000b0c <process_command+0x2a4>)
 800096e:	691b      	ldr	r3, [r3, #16]
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6113      	str	r3, [r2, #16]

      /* Check sector number for bank 2 */
      uint32_t sector_num = RxBuffer[1];
 8000976:	4b64      	ldr	r3, [pc, #400]	; (8000b08 <process_command+0x2a0>)
 8000978:	785b      	ldrb	r3, [r3, #1]
 800097a:	60fb      	str	r3, [r7, #12]
      if(12 <= sector_num)
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2b0b      	cmp	r3, #11
 8000980:	d902      	bls.n	8000988 <process_command+0x120>
      {
        /* Bank 2 */
        sector_num = sector_num + 4;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3304      	adds	r3, #4
 8000986:	60fb      	str	r3, [r7, #12]
      {

      }

      /* Write sector number */
      FLASH->CR |= (FLASH_CR_SNB & (sector_num << 3));
 8000988:	4960      	ldr	r1, [pc, #384]	; (8000b0c <process_command+0x2a4>)
 800098a:	4b60      	ldr	r3, [pc, #384]	; (8000b0c <process_command+0x2a4>)
 800098c:	691a      	ldr	r2, [r3, #16]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4313      	orrs	r3, r2
 8000996:	610b      	str	r3, [r1, #16]

      /* Start sector erase */
      FLASH->CR |= FLASH_CR_STRT;
 8000998:	4a5c      	ldr	r2, [pc, #368]	; (8000b0c <process_command+0x2a4>)
 800099a:	4b5c      	ldr	r3, [pc, #368]	; (8000b0c <process_command+0x2a4>)
 800099c:	691b      	ldr	r3, [r3, #16]
 800099e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009a2:	6113      	str	r3, [r2, #16]

      /* Wait bsy flag */
      while(0 != (FLASH->SR & FLASH_SR_BSY))
 80009a4:	bf00      	nop
 80009a6:	4b59      	ldr	r3, [pc, #356]	; (8000b0c <process_command+0x2a4>)
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d1f9      	bne.n	80009a6 <process_command+0x13e>
      {
        /* Waiting */
      }

      /* Disable sector erase */
      FLASH->CR &= ~FLASH_CR_SER;
 80009b2:	4a56      	ldr	r2, [pc, #344]	; (8000b0c <process_command+0x2a4>)
 80009b4:	4b55      	ldr	r3, [pc, #340]	; (8000b0c <process_command+0x2a4>)
 80009b6:	691b      	ldr	r3, [r3, #16]
 80009b8:	f023 0302 	bic.w	r3, r3, #2
 80009bc:	6113      	str	r3, [r2, #16]

      strTransmit(erased, sizeof(erased));
 80009be:	211f      	movs	r1, #31
 80009c0:	485b      	ldr	r0, [pc, #364]	; (8000b30 <process_command+0x2c8>)
 80009c2:	f000 f8c3 	bl	8000b4c <strTransmit>
      strTransmit(line, sizeof(line));
 80009c6:	212f      	movs	r1, #47	; 0x2f
 80009c8:	4852      	ldr	r0, [pc, #328]	; (8000b14 <process_command+0x2ac>)
 80009ca:	f000 f8bf 	bl	8000b4c <strTransmit>
      break;
 80009ce:	e096      	b.n	8000afe <process_command+0x296>

    case 6: /* Write Protection */
      /* Wait bsy flag */
      while(0 != (FLASH->SR & FLASH_SR_BSY))
 80009d0:	bf00      	nop
 80009d2:	4b4e      	ldr	r3, [pc, #312]	; (8000b0c <process_command+0x2a4>)
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d1f9      	bne.n	80009d2 <process_command+0x16a>
      {
        /* Waiting */
      }

      /* Check sector number */
      sector_num = RxBuffer[1];
 80009de:	4b4a      	ldr	r3, [pc, #296]	; (8000b08 <process_command+0x2a0>)
 80009e0:	785b      	ldrb	r3, [r3, #1]
 80009e2:	60fb      	str	r3, [r7, #12]
      if(12 <= sector_num)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2b0b      	cmp	r3, #11
 80009e8:	d90e      	bls.n	8000a08 <process_command+0x1a0>
      {
        /* Bank 2 */
        sector_num = sector_num - 12;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	3b0c      	subs	r3, #12
 80009ee:	60fb      	str	r3, [r7, #12]
        FLASH->OPTCR1 &= ~((1 << sector_num) << 16);
 80009f0:	4946      	ldr	r1, [pc, #280]	; (8000b0c <process_command+0x2a4>)
 80009f2:	4b46      	ldr	r3, [pc, #280]	; (8000b0c <process_command+0x2a4>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	2001      	movs	r0, #1
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	fa00 f202 	lsl.w	r2, r0, r2
 80009fe:	0412      	lsls	r2, r2, #16
 8000a00:	43d2      	mvns	r2, r2
 8000a02:	4013      	ands	r3, r2
 8000a04:	618b      	str	r3, [r1, #24]
 8000a06:	e00a      	b.n	8000a1e <process_command+0x1b6>
      }
      else
      {
        /* Bank 2 */
        FLASH->OPTCR &= ~((1 << sector_num) << 16);
 8000a08:	4940      	ldr	r1, [pc, #256]	; (8000b0c <process_command+0x2a4>)
 8000a0a:	4b40      	ldr	r3, [pc, #256]	; (8000b0c <process_command+0x2a4>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	2001      	movs	r0, #1
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	fa00 f202 	lsl.w	r2, r0, r2
 8000a16:	0412      	lsls	r2, r2, #16
 8000a18:	43d2      	mvns	r2, r2
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	614b      	str	r3, [r1, #20]
      }

      /* Start sector write protection */
      FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 8000a1e:	4a3b      	ldr	r2, [pc, #236]	; (8000b0c <process_command+0x2a4>)
 8000a20:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <process_command+0x2a4>)
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	6153      	str	r3, [r2, #20]

      /* Wait bsy flag */
      while(0 != (FLASH->SR & FLASH_SR_BSY))
 8000a2a:	bf00      	nop
 8000a2c:	4b37      	ldr	r3, [pc, #220]	; (8000b0c <process_command+0x2a4>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1f9      	bne.n	8000a2c <process_command+0x1c4>
      {
        /* Waiting */
      }

      strTransmit(protected, sizeof(protected));
 8000a38:	2124      	movs	r1, #36	; 0x24
 8000a3a:	483e      	ldr	r0, [pc, #248]	; (8000b34 <process_command+0x2cc>)
 8000a3c:	f000 f886 	bl	8000b4c <strTransmit>
      strTransmit(line, sizeof(line));
 8000a40:	212f      	movs	r1, #47	; 0x2f
 8000a42:	4834      	ldr	r0, [pc, #208]	; (8000b14 <process_command+0x2ac>)
 8000a44:	f000 f882 	bl	8000b4c <strTransmit>
      break;
 8000a48:	e059      	b.n	8000afe <process_command+0x296>

    case 7: /* Remove Write Protection */
      /* Wait bsy flag */
      while(0 != (FLASH->SR & FLASH_SR_BSY))
 8000a4a:	bf00      	nop
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <process_command+0x2a4>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1f9      	bne.n	8000a4c <process_command+0x1e4>
      {
        /* Waiting */
      }

      /* Check sector number */
      sector_num = RxBuffer[1];
 8000a58:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <process_command+0x2a0>)
 8000a5a:	785b      	ldrb	r3, [r3, #1]
 8000a5c:	60fb      	str	r3, [r7, #12]
      if(12 <= sector_num)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2b0b      	cmp	r3, #11
 8000a62:	d90d      	bls.n	8000a80 <process_command+0x218>
      {
        /* Bank 2 */
        sector_num = sector_num - 12;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3b0c      	subs	r3, #12
 8000a68:	60fb      	str	r3, [r7, #12]
        FLASH->OPTCR1 |= ((1 << sector_num) << 16);
 8000a6a:	4928      	ldr	r1, [pc, #160]	; (8000b0c <process_command+0x2a4>)
 8000a6c:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <process_command+0x2a4>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	2001      	movs	r0, #1
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	fa00 f202 	lsl.w	r2, r0, r2
 8000a78:	0412      	lsls	r2, r2, #16
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	618b      	str	r3, [r1, #24]
 8000a7e:	e009      	b.n	8000a94 <process_command+0x22c>
      }
      else
      {
        /* Bank 2 */
        FLASH->OPTCR |= ((1 << sector_num) << 16);
 8000a80:	4922      	ldr	r1, [pc, #136]	; (8000b0c <process_command+0x2a4>)
 8000a82:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <process_command+0x2a4>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	2001      	movs	r0, #1
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8e:	0412      	lsls	r2, r2, #16
 8000a90:	4313      	orrs	r3, r2
 8000a92:	614b      	str	r3, [r1, #20]
      }

      /* Start sector write protection */
      FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 8000a94:	4a1d      	ldr	r2, [pc, #116]	; (8000b0c <process_command+0x2a4>)
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <process_command+0x2a4>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
 8000a9e:	6153      	str	r3, [r2, #20]

      /* Wait bsy flag */
      while(0 != (FLASH->SR & FLASH_SR_BSY))
 8000aa0:	bf00      	nop
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <process_command+0x2a4>)
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1f9      	bne.n	8000aa2 <process_command+0x23a>
      {
        /* Waiting */
      }

      strTransmit(not_protected, sizeof(not_protected));
 8000aae:	2120      	movs	r1, #32
 8000ab0:	4821      	ldr	r0, [pc, #132]	; (8000b38 <process_command+0x2d0>)
 8000ab2:	f000 f84b 	bl	8000b4c <strTransmit>
      strTransmit(line, sizeof(line));
 8000ab6:	212f      	movs	r1, #47	; 0x2f
 8000ab8:	4816      	ldr	r0, [pc, #88]	; (8000b14 <process_command+0x2ac>)
 8000aba:	f000 f847 	bl	8000b4c <strTransmit>
      break;
 8000abe:	e01e      	b.n	8000afe <process_command+0x296>

    case 8: /* Option Bytes Unlock */
      /* Write OPTKEY1 */
      FLASH->OPTKEYR = 0x08192A3B;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <process_command+0x2a4>)
 8000ac2:	4a1e      	ldr	r2, [pc, #120]	; (8000b3c <process_command+0x2d4>)
 8000ac4:	609a      	str	r2, [r3, #8]

      /* Write OPTKEY2 */
      FLASH->OPTKEYR = 0x4C5D6E7F;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <process_command+0x2a4>)
 8000ac8:	4a1d      	ldr	r2, [pc, #116]	; (8000b40 <process_command+0x2d8>)
 8000aca:	609a      	str	r2, [r3, #8]

      strTransmit(ob_unlocked, sizeof(ob_unlocked));
 8000acc:	2127      	movs	r1, #39	; 0x27
 8000ace:	481d      	ldr	r0, [pc, #116]	; (8000b44 <process_command+0x2dc>)
 8000ad0:	f000 f83c 	bl	8000b4c <strTransmit>
      strTransmit(line, sizeof(line));
 8000ad4:	212f      	movs	r1, #47	; 0x2f
 8000ad6:	480f      	ldr	r0, [pc, #60]	; (8000b14 <process_command+0x2ac>)
 8000ad8:	f000 f838 	bl	8000b4c <strTransmit>
      break;
 8000adc:	e00f      	b.n	8000afe <process_command+0x296>

    case 9: /* Option Bytes Lock */
      /* Write lock bit */
      FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000ade:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <process_command+0x2a4>)
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <process_command+0x2a4>)
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6153      	str	r3, [r2, #20]

      strTransmit(ob_locked, sizeof(ob_locked));
 8000aea:	2125      	movs	r1, #37	; 0x25
 8000aec:	4816      	ldr	r0, [pc, #88]	; (8000b48 <process_command+0x2e0>)
 8000aee:	f000 f82d 	bl	8000b4c <strTransmit>
      strTransmit(line, sizeof(line));
 8000af2:	212f      	movs	r1, #47	; 0x2f
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <process_command+0x2ac>)
 8000af6:	f000 f829 	bl	8000b4c <strTransmit>
      break;
 8000afa:	e000      	b.n	8000afe <process_command+0x296>

    default:
      break;
 8000afc:	bf00      	nop
  }
}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200002e8 	.word	0x200002e8
 8000b0c:	40023c00 	.word	0x40023c00
 8000b10:	200001c8 	.word	0x200001c8
 8000b14:	20000108 	.word	0x20000108
 8000b18:	45670123 	.word	0x45670123
 8000b1c:	cdef89ab 	.word	0xcdef89ab
 8000b20:	200001a8 	.word	0x200001a8
 8000b24:	200002e9 	.word	0x200002e9
 8000b28:	200002ed 	.word	0x200002ed
 8000b2c:	2000029c 	.word	0x2000029c
 8000b30:	200001e8 	.word	0x200001e8
 8000b34:	20000258 	.word	0x20000258
 8000b38:	2000027c 	.word	0x2000027c
 8000b3c:	08192a3b 	.word	0x08192a3b
 8000b40:	4c5d6e7f 	.word	0x4c5d6e7f
 8000b44:	20000208 	.word	0x20000208
 8000b48:	20000230 	.word	0x20000230

08000b4c <strTransmit>:
 * @note
 * @param   str, size
 * @retval  None
 */
static void strTransmit(const char * str, uint8_t size)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	70fb      	strb	r3, [r7, #3]
  /* Check null pointers */
  if(NULL != str)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d016      	beq.n	8000b8c <strTransmit+0x40>
  {
    /* Wait until DMA2 stream 7 is disabled */
    while(DMA_SxCR_EN == (DMA_SxCR_EN & DMA2_Stream7->CR))
 8000b5e:	bf00      	nop
 8000b60:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <strTransmit+0x4c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d0f9      	beq.n	8000b60 <strTransmit+0x14>
      /* Do nothing, the enable flag shall reset
       * when DMA transfer complete */
    }

    /* Set memory address */
    DMA2_Stream7->M0AR = (uint32_t)str;
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <strTransmit+0x4c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	60d3      	str	r3, [r2, #12]

    /* Set number of data items */
    DMA2_Stream7->NDTR = size;
 8000b72:	4a09      	ldr	r2, [pc, #36]	; (8000b98 <strTransmit+0x4c>)
 8000b74:	78fb      	ldrb	r3, [r7, #3]
 8000b76:	6053      	str	r3, [r2, #4]

    /* Clear all interrupt flags */
    DMA2->HIFCR = (DMA_HIFCR_CFEIF7 | DMA_HIFCR_CDMEIF7 | DMA_HIFCR_CTEIF7
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <strTransmit+0x50>)
 8000b7a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000b7e:	60da      	str	r2, [r3, #12]
        | DMA_HIFCR_CHTIF7 | DMA_HIFCR_CTCIF7);

    /* Enable DMA2 stream 7 */
    DMA2_Stream7->CR |= DMA_SxCR_EN;
 8000b80:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <strTransmit+0x4c>)
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <strTransmit+0x4c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6013      	str	r3, [r2, #0]
  }
  else
  {
    /* Null pointers, do nothing */
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	400264b8 	.word	0x400264b8
 8000b9c:	40026400 	.word	0x40026400

08000ba0 <FLASH_USART1_GPIO_Config>:

void FLASH_USART1_GPIO_Config(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* Enable port A clock */
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000ba4:	4a20      	ldr	r2, [pc, #128]	; (8000c28 <FLASH_USART1_GPIO_Config+0x88>)
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <FLASH_USART1_GPIO_Config+0x88>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30

  /* Select alternate function mode */
  GPIOA->MODER &= ~(GPIO_MODER_MODER9 | GPIO_MODER_MODER10);
 8000bb0:	4a1e      	ldr	r2, [pc, #120]	; (8000c2c <FLASH_USART1_GPIO_Config+0x8c>)
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <FLASH_USART1_GPIO_Config+0x8c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000bba:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (GPIO_MODER_MODER9_1 | GPIO_MODER_MODER10_1);
 8000bbc:	4a1b      	ldr	r2, [pc, #108]	; (8000c2c <FLASH_USART1_GPIO_Config+0x8c>)
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <FLASH_USART1_GPIO_Config+0x8c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8000bc6:	6013      	str	r3, [r2, #0]

  /* Select output type push-pull */
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT_9;
 8000bc8:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <FLASH_USART1_GPIO_Config+0x8c>)
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <FLASH_USART1_GPIO_Config+0x8c>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000bd2:	6053      	str	r3, [r2, #4]

  /* Select output speed medium */
  GPIOA->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR9;
 8000bd4:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <FLASH_USART1_GPIO_Config+0x8c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <FLASH_USART1_GPIO_Config+0x8c>)
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000bde:	6093      	str	r3, [r2, #8]
  GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_0;
 8000be0:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <FLASH_USART1_GPIO_Config+0x8c>)
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <FLASH_USART1_GPIO_Config+0x8c>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bea:	6093      	str	r3, [r2, #8]

  /* Select pull up */
  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR9 | GPIO_PUPDR_PUPDR10);
 8000bec:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <FLASH_USART1_GPIO_Config+0x8c>)
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <FLASH_USART1_GPIO_Config+0x8c>)
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000bf6:	60d3      	str	r3, [r2, #12]
  GPIOA->PUPDR |= (GPIO_PUPDR_PUPDR9_0 | GPIO_PUPDR_PUPDR10_0);
 8000bf8:	4a0c      	ldr	r2, [pc, #48]	; (8000c2c <FLASH_USART1_GPIO_Config+0x8c>)
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <FLASH_USART1_GPIO_Config+0x8c>)
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 8000c02:	60d3      	str	r3, [r2, #12]

  /* Select AF7 */
  GPIOA->AFR[1] &= ~(GPIO_AFRH_AFRH9 | GPIO_AFRH_AFRH10);
 8000c04:	4a09      	ldr	r2, [pc, #36]	; (8000c2c <FLASH_USART1_GPIO_Config+0x8c>)
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <FLASH_USART1_GPIO_Config+0x8c>)
 8000c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000c0e:	6253      	str	r3, [r2, #36]	; 0x24
  GPIOA->AFR[1] |= 0x00000770/*(GPIO_AFRH_AFRH9_AF7 | GPIO_AFRH_AFRH10_AF7)*/;
 8000c10:	4a06      	ldr	r2, [pc, #24]	; (8000c2c <FLASH_USART1_GPIO_Config+0x8c>)
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <FLASH_USART1_GPIO_Config+0x8c>)
 8000c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c16:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000c1a:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000

08000c30 <FLASH_USART1_TX_DMA_Config>:

void FLASH_USART1_TX_DMA_Config(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* Enable DMA clock in RCC */
  RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000c34:	4a31      	ldr	r2, [pc, #196]	; (8000cfc <FLASH_USART1_TX_DMA_Config+0xcc>)
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <FLASH_USART1_TX_DMA_Config+0xcc>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c3e:	6313      	str	r3, [r2, #48]	; 0x30

  /* Make sure that the DMA2 stream 7 is disabled */
  if(DMA_SxCR_EN == (DMA_SxCR_EN & DMA2_Stream7->CR))
 8000c40:	4b2f      	ldr	r3, [pc, #188]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d10c      	bne.n	8000c66 <FLASH_USART1_TX_DMA_Config+0x36>
  {
    /* DMA 2 stream 7 is enabled, shall be disabled first */
    DMA2_Stream7->CR &= ~DMA_SxCR_EN;
 8000c4c:	4a2c      	ldr	r2, [pc, #176]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000c4e:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f023 0301 	bic.w	r3, r3, #1
 8000c56:	6013      	str	r3, [r2, #0]

    /* Wait until EN bit is cleared */
    while(DMA_SxCR_EN == (DMA_SxCR_EN & DMA2_Stream7->CR))
 8000c58:	bf00      	nop
 8000c5a:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d0f9      	beq.n	8000c5a <FLASH_USART1_TX_DMA_Config+0x2a>
  {
    /* Do nothing, stream 7 is not enabled */
  }

  /* Select the DMA channel 4 in CHSEL[2:0] in the DMA_SxCR */
  DMA2_Stream7->CR &= ~DMA_SxCR_CHSEL;
 8000c66:	4a26      	ldr	r2, [pc, #152]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000c68:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8000c70:	6013      	str	r3, [r2, #0]
  DMA2_Stream7->CR |= DMA_SxCR_CHSEL_2;
 8000c72:	4a23      	ldr	r2, [pc, #140]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c7c:	6013      	str	r3, [r2, #0]

  /* Select stream priority very high */
  DMA2_Stream7->CR |= DMA_SxCR_PL;
 8000c7e:	4a20      	ldr	r2, [pc, #128]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000c88:	6013      	str	r3, [r2, #0]

  /* Select the data transfer direction memory-to-peripheral */
  DMA2_Stream7->CR &= ~DMA_SxCR_DIR;
 8000c8a:	4a1d      	ldr	r2, [pc, #116]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000c94:	6013      	str	r3, [r2, #0]
  DMA2_Stream7->CR |= DMA_SxCR_DIR_0;
 8000c96:	4a1a      	ldr	r2, [pc, #104]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca0:	6013      	str	r3, [r2, #0]

  /* Select memory and peripherals sizes byte (8-bit) */
  DMA2_Stream7->CR &= ~DMA_SxCR_MSIZE;
 8000ca2:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000cac:	6013      	str	r3, [r2, #0]
  DMA2_Stream7->CR &= ~DMA_SxCR_PSIZE;
 8000cae:	4a14      	ldr	r2, [pc, #80]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000cb8:	6013      	str	r3, [r2, #0]

  /* Select FIFO mode */
  DMA2_Stream7->FCR |= DMA_SxFCR_DMDIS;
 8000cba:	4a11      	ldr	r2, [pc, #68]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000cbc:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	f043 0304 	orr.w	r3, r3, #4
 8000cc4:	6153      	str	r3, [r2, #20]

  /* Select FIFO threshold level half FIFO */
  DMA2_Stream7->FCR |= (DMA_SxFCR_FTH_0 | DMA_SxFCR_FTH_1);
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	f043 0303 	orr.w	r3, r3, #3
 8000cd0:	6153      	str	r3, [r2, #20]

  /* Select memory incremented mode, peripheral shall has fixed address */
  DMA2_Stream7->CR |= DMA_SxCR_MINC;
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cdc:	6013      	str	r3, [r2, #0]

  /* Enable DMA transfer complete interrupt */
  DMA2_Stream7->CR |= DMA_SxCR_TCIE;
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f043 0310 	orr.w	r3, r3, #16
 8000ce8:	6013      	str	r3, [r2, #0]

  /* Set peripheral address */
  DMA2_Stream7->PAR = (uint32_t)&USART1->DR;
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <FLASH_USART1_TX_DMA_Config+0xd0>)
 8000cec:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <FLASH_USART1_TX_DMA_Config+0xd4>)
 8000cee:	609a      	str	r2, [r3, #8]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	400264b8 	.word	0x400264b8
 8000d04:	40011004 	.word	0x40011004

08000d08 <FLASH_USART1_RX_DMA_Config>:

void FLASH_USART1_RX_DMA_Config(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* Enable DMA clock in RCC */
  RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000d0c:	4a31      	ldr	r2, [pc, #196]	; (8000dd4 <FLASH_USART1_RX_DMA_Config+0xcc>)
 8000d0e:	4b31      	ldr	r3, [pc, #196]	; (8000dd4 <FLASH_USART1_RX_DMA_Config+0xcc>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30

  /* Make sure that the DMA2 stream 5 is disabled */
  if(DMA_SxCR_EN == (DMA_SxCR_EN & DMA2_Stream5->CR))
 8000d18:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d10c      	bne.n	8000d3e <FLASH_USART1_RX_DMA_Config+0x36>
  {
    /* DMA 2 stream 5 is enabled, shall be disabled first */
    DMA2_Stream5->CR &= ~DMA_SxCR_EN;
 8000d24:	4a2c      	ldr	r2, [pc, #176]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d26:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f023 0301 	bic.w	r3, r3, #1
 8000d2e:	6013      	str	r3, [r2, #0]

    /* Wait until EN bit is cleared */
    while(DMA_SxCR_EN == (DMA_SxCR_EN & DMA2_Stream5->CR))
 8000d30:	bf00      	nop
 8000d32:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d0f9      	beq.n	8000d32 <FLASH_USART1_RX_DMA_Config+0x2a>
  {
    /* Do nothing, stream 5 is not enabled */
  }

  /* Select the DMA channel 4 in CHSEL[2:0] in the DMA_SxCR */
  DMA2_Stream5->CR &= ~DMA_SxCR_CHSEL;
 8000d3e:	4a26      	ldr	r2, [pc, #152]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d40:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8000d48:	6013      	str	r3, [r2, #0]
  DMA2_Stream5->CR |= DMA_SxCR_CHSEL_2;
 8000d4a:	4a23      	ldr	r2, [pc, #140]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d54:	6013      	str	r3, [r2, #0]

  /* Select stream priority very high */
  DMA2_Stream5->CR |= DMA_SxCR_PL;
 8000d56:	4a20      	ldr	r2, [pc, #128]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000d60:	6013      	str	r3, [r2, #0]

  /* Select the data transfer direction peripheral-to-memory */
  DMA2_Stream5->CR &= ~DMA_SxCR_DIR;
 8000d62:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000d6c:	6013      	str	r3, [r2, #0]

  /* Select memory and peripherals sizes byte (8-bit) */
  DMA2_Stream5->CR &= ~DMA_SxCR_MSIZE;
 8000d6e:	4a1a      	ldr	r2, [pc, #104]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000d78:	6013      	str	r3, [r2, #0]
  DMA2_Stream5->CR &= ~DMA_SxCR_PSIZE;
 8000d7a:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000d84:	6013      	str	r3, [r2, #0]

  /* Select FIFO mode */
  DMA2_Stream5->FCR |= DMA_SxFCR_DMDIS;
 8000d86:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	6153      	str	r3, [r2, #20]

  /* Select FIFO threshold level half FIFO */
  DMA2_Stream5->FCR |= (DMA_SxFCR_FTH_0 | DMA_SxFCR_FTH_1);
 8000d92:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d94:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	f043 0303 	orr.w	r3, r3, #3
 8000d9c:	6153      	str	r3, [r2, #20]

  /* Select memory incremented mode, peripheral shall has fixed address */
  DMA2_Stream5->CR |= DMA_SxCR_MINC;
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da8:	6013      	str	r3, [r2, #0]

  /* Enable DMA transfer complete interrupt */
  DMA2_Stream5->CR |= DMA_SxCR_TCIE;
 8000daa:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f043 0310 	orr.w	r3, r3, #16
 8000db4:	6013      	str	r3, [r2, #0]

  /* Set peripheral address */
  DMA2_Stream5->PAR = (uint32_t)&USART1->DR;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000db8:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <FLASH_USART1_RX_DMA_Config+0xd4>)
 8000dba:	609a      	str	r2, [r3, #8]

  /* Set memory address */
  DMA2_Stream5->M0AR = (uint32_t)RxDMABuffer;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <FLASH_USART1_RX_DMA_Config+0xd8>)
 8000dc0:	60da      	str	r2, [r3, #12]

  /* Set number of data items */
  DMA2_Stream5->NDTR = MAX_BUFFER_LENGTH;
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <FLASH_USART1_RX_DMA_Config+0xd0>)
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	605a      	str	r2, [r3, #4]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40026488 	.word	0x40026488
 8000ddc:	40011004 	.word	0x40011004
 8000de0:	20000368 	.word	0x20000368

08000de4 <FLASH_USART1_Init>:
 * @note
 * @param   None
 * @retval  None
 */
void FLASH_USART1_Init(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* Configure USART1 */
  /* Enable USART1 clock */
  RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <FLASH_USART1_Init+0x1c>)
 8000dea:	2210      	movs	r2, #16
 8000dec:	645a      	str	r2, [r3, #68]	; 0x44
   *
   * DIV_Fraction = 16 * 0.82 = 13.12 = 13 = 0xD
   * DIV_Mantissa = 48 = 0x30
   *
   * BRR          = 0x30D */
  USART1->BRR = 0x30D;
 8000dee:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <FLASH_USART1_Init+0x20>)
 8000df0:	f240 320d 	movw	r2, #781	; 0x30d
 8000df4:	811a      	strh	r2, [r3, #8]
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40011000 	.word	0x40011000

08000e08 <FLASH_USART1_Enable>:
 * @note
 * @param   None
 * @retval  None
 */
void FLASH_USART1_Enable(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* Enable USART1 */
  USART1->CR1 |= USART_CR1_UE;
 8000e0c:	4a1f      	ldr	r2, [pc, #124]	; (8000e8c <FLASH_USART1_Enable+0x84>)
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <FLASH_USART1_Enable+0x84>)
 8000e10:	899b      	ldrh	r3, [r3, #12]
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	8193      	strh	r3, [r2, #12]

  /* Enable transmitter */
  USART1->CR1 |= USART_CR1_TE;
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	; (8000e8c <FLASH_USART1_Enable+0x84>)
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <FLASH_USART1_Enable+0x84>)
 8000e20:	899b      	ldrh	r3, [r3, #12]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	8193      	strh	r3, [r2, #12]

  /* Enable receiver */
  USART1->CR1 |= USART_CR1_RE;
 8000e2c:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <FLASH_USART1_Enable+0x84>)
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <FLASH_USART1_Enable+0x84>)
 8000e30:	899b      	ldrh	r3, [r3, #12]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	8193      	strh	r3, [r2, #12]

  /* Enable idle line detection interrupt */
  USART1->CR1 |= USART_CR1_IDLEIE;
 8000e3c:	4a13      	ldr	r2, [pc, #76]	; (8000e8c <FLASH_USART1_Enable+0x84>)
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <FLASH_USART1_Enable+0x84>)
 8000e40:	899b      	ldrh	r3, [r3, #12]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	f043 0310 	orr.w	r3, r3, #16
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	8193      	strh	r3, [r2, #12]

  /* Enable DMA mode for transmitter and receiver */
  USART1->CR3 |= USART_CR3_DMAT;
 8000e4c:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <FLASH_USART1_Enable+0x84>)
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <FLASH_USART1_Enable+0x84>)
 8000e50:	8a9b      	ldrh	r3, [r3, #20]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	8293      	strh	r3, [r2, #20]
  USART1->CR3 |= USART_CR3_DMAR;
 8000e5c:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <FLASH_USART1_Enable+0x84>)
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <FLASH_USART1_Enable+0x84>)
 8000e60:	8a9b      	ldrh	r3, [r3, #20]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	8293      	strh	r3, [r2, #20]

  /* Clear all DMA interrupt flags for RX */
  DMA2->HIFCR = (DMA_HIFCR_CFEIF5 | DMA_HIFCR_CDMEIF5 | DMA_HIFCR_CTEIF5
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <FLASH_USART1_Enable+0x88>)
 8000e6e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000e72:	60da      	str	r2, [r3, #12]
      | DMA_HIFCR_CHTIF5 | DMA_HIFCR_CTCIF5);

  /* Enable DMA2 stream 5 for RX */
  DMA2_Stream5->CR |= DMA_SxCR_EN;
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <FLASH_USART1_Enable+0x8c>)
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <FLASH_USART1_Enable+0x8c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40011000 	.word	0x40011000
 8000e90:	40026400 	.word	0x40026400
 8000e94:	40026488 	.word	0x40026488

08000e98 <FLASH_USART1_IRQ_Callback>:
 * @note
 * @param   None
 * @retval  None
 */
void FLASH_USART1_IRQ_Callback(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* Check if idle line detected */
  if((USART1->SR & USART_SR_IDLE) == USART_SR_IDLE)
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <FLASH_USART1_IRQ_Callback+0x2c>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	f003 0310 	and.w	r3, r3, #16
 8000ea6:	2b10      	cmp	r3, #16
 8000ea8:	d107      	bne.n	8000eba <FLASH_USART1_IRQ_Callback+0x22>
  {
    /* Read data register to clear idle line flag */
    (void)USART1->DR;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <FLASH_USART1_IRQ_Callback+0x2c>)
 8000eac:	889b      	ldrh	r3, [r3, #4]

    /* Disable DMA stream for RX */
    DMA2_Stream5->CR &= ~DMA_SxCR_EN;
 8000eae:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <FLASH_USART1_IRQ_Callback+0x30>)
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <FLASH_USART1_IRQ_Callback+0x30>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f023 0301 	bic.w	r3, r3, #1
 8000eb8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    /* No new data received */
  }
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	40011000 	.word	0x40011000
 8000ec8:	40026488 	.word	0x40026488

08000ecc <FLASH_USART1_TX_DMA_IRQ_Callback>:
 * @note
 * @param   None
 * @retval  None
 */
void FLASH_USART1_TX_DMA_IRQ_Callback(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* Check transfer complete flag */
  if(DMA_HISR_TCIF7 == (DMA_HISR_TCIF7 & DMA2->HISR))
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <FLASH_USART1_TX_DMA_IRQ_Callback+0x24>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ed8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000edc:	d103      	bne.n	8000ee6 <FLASH_USART1_TX_DMA_IRQ_Callback+0x1a>
  {
    /* Clear all interrupt flags */
    DMA2->HIFCR = (DMA_HIFCR_CFEIF7 | DMA_HIFCR_CDMEIF7 | DMA_HIFCR_CTEIF7
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <FLASH_USART1_TX_DMA_IRQ_Callback+0x24>)
 8000ee0:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000ee4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Do nothing, this interrupt is not handled */
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	40026400 	.word	0x40026400

08000ef4 <FLASH_USART1_RX_DMA_IRQ_Callback>:
 * @note
 * @param   None
 * @retval  None
 */
void FLASH_USART1_RX_DMA_IRQ_Callback(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
  /* Check transfer complete flag */
  if(DMA_HISR_TCIF5 == (DMA_HISR_TCIF5 & DMA2->HISR))
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <FLASH_USART1_RX_DMA_IRQ_Callback+0x70>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f06:	d127      	bne.n	8000f58 <FLASH_USART1_RX_DMA_IRQ_Callback+0x64>
  {
    /* Calculate amount of data received */
    RxMessageLength = MAX_BUFFER_LENGTH - DMA2_Stream5->NDTR;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <FLASH_USART1_RX_DMA_IRQ_Callback+0x74>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <FLASH_USART1_RX_DMA_IRQ_Callback+0x78>)
 8000f18:	701a      	strb	r2, [r3, #0]

    /* Copy data into RX buffer */
    for(int idx = 0; idx < RxMessageLength; idx++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	e00b      	b.n	8000f38 <FLASH_USART1_RX_DMA_IRQ_Callback+0x44>
    {
      RxBuffer[idx] = RxDMABuffer[idx];
 8000f20:	4a13      	ldr	r2, [pc, #76]	; (8000f70 <FLASH_USART1_RX_DMA_IRQ_Callback+0x7c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	7819      	ldrb	r1, [r3, #0]
 8000f28:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <FLASH_USART1_RX_DMA_IRQ_Callback+0x80>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	460a      	mov	r2, r1
 8000f30:	701a      	strb	r2, [r3, #0]
    for(int idx = 0; idx < RxMessageLength; idx++)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3301      	adds	r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <FLASH_USART1_RX_DMA_IRQ_Callback+0x78>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dced      	bgt.n	8000f20 <FLASH_USART1_RX_DMA_IRQ_Callback+0x2c>
    }

    /* Clear all interrupt flags */
    DMA2->HIFCR = (DMA_HIFCR_CFEIF5 | DMA_HIFCR_CDMEIF5 | DMA_HIFCR_CTEIF5
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <FLASH_USART1_RX_DMA_IRQ_Callback+0x70>)
 8000f46:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000f4a:	60da      	str	r2, [r3, #12]
        | DMA_HIFCR_CHTIF5 | DMA_HIFCR_CTCIF5);

    /* Enable DMA 2 stream 5 */
    DMA2_Stream5->CR |= DMA_SxCR_EN;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <FLASH_USART1_RX_DMA_IRQ_Callback+0x74>)
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <FLASH_USART1_RX_DMA_IRQ_Callback+0x74>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6013      	str	r3, [r2, #0]
  }
  else
  {
    /* Do nothing, this interrupt is not handled */
  }
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	40026400 	.word	0x40026400
 8000f68:	40026488 	.word	0x40026488
 8000f6c:	200003e8 	.word	0x200003e8
 8000f70:	20000368 	.word	0x20000368
 8000f74:	200002e8 	.word	0x200002e8

08000f78 <FLASH_Init>:
 * @note
 * @param   None
 * @retval  None
 */
void FLASH_Init(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* Write KEY1 */
  FLASH->KEYR = 0x45670123;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <FLASH_Init+0x40>)
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <FLASH_Init+0x44>)
 8000f80:	605a      	str	r2, [r3, #4]

  /* Write KEY2 */
  FLASH->KEYR = 0xCDEF89AB;
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <FLASH_Init+0x40>)
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <FLASH_Init+0x48>)
 8000f86:	605a      	str	r2, [r3, #4]

  /* Select flash parallelism x32 */
  FLASH->CR &= ~FLASH_CR_PSIZE;
 8000f88:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <FLASH_Init+0x40>)
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <FLASH_Init+0x40>)
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PSIZE_1;
 8000f94:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <FLASH_Init+0x40>)
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <FLASH_Init+0x40>)
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9e:	6113      	str	r3, [r2, #16]

  /* Write lock bit */
  FLASH->CR |= FLASH_CR_LOCK;
 8000fa0:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <FLASH_Init+0x40>)
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <FLASH_Init+0x40>)
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000faa:	6113      	str	r3, [r2, #16]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40023c00 	.word	0x40023c00
 8000fbc:	45670123 	.word	0x45670123
 8000fc0:	cdef89ab 	.word	0xcdef89ab

08000fc4 <FLASH_Main>:
 * @note
 * @param   None
 * @retval  None
 */
void FLASH_Main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* Check current USART state */
  switch (currentState)
 8000fc8:	4b29      	ldr	r3, [pc, #164]	; (8001070 <FLASH_Main+0xac>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d002      	beq.n	8000fd6 <FLASH_Main+0x12>
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d03c      	beq.n	800104e <FLASH_Main+0x8a>
      /* Go to next state */
      currentState = FLASH_WAIT_FOR_CMD;
      break;

    default:
      break;
 8000fd4:	e04a      	b.n	800106c <FLASH_Main+0xa8>
      strTransmit(line, sizeof(line));
 8000fd6:	212f      	movs	r1, #47	; 0x2f
 8000fd8:	4826      	ldr	r0, [pc, #152]	; (8001074 <FLASH_Main+0xb0>)
 8000fda:	f7ff fdb7 	bl	8000b4c <strTransmit>
      strTransmit(hello, sizeof(hello));
 8000fde:	211e      	movs	r1, #30
 8000fe0:	4825      	ldr	r0, [pc, #148]	; (8001078 <FLASH_Main+0xb4>)
 8000fe2:	f7ff fdb3 	bl	8000b4c <strTransmit>
      strTransmit(select_cmd, sizeof(select_cmd));
 8000fe6:	2124      	movs	r1, #36	; 0x24
 8000fe8:	4824      	ldr	r0, [pc, #144]	; (800107c <FLASH_Main+0xb8>)
 8000fea:	f7ff fdaf 	bl	8000b4c <strTransmit>
      strTransmit(line, sizeof(line));
 8000fee:	212f      	movs	r1, #47	; 0x2f
 8000ff0:	4820      	ldr	r0, [pc, #128]	; (8001074 <FLASH_Main+0xb0>)
 8000ff2:	f7ff fdab 	bl	8000b4c <strTransmit>
      strTransmit(lock, sizeof(lock));
 8000ff6:	210e      	movs	r1, #14
 8000ff8:	4821      	ldr	r0, [pc, #132]	; (8001080 <FLASH_Main+0xbc>)
 8000ffa:	f7ff fda7 	bl	8000b4c <strTransmit>
      strTransmit(unlock, sizeof(unlock));
 8000ffe:	2110      	movs	r1, #16
 8001000:	4820      	ldr	r0, [pc, #128]	; (8001084 <FLASH_Main+0xc0>)
 8001002:	f7ff fda3 	bl	8000b4c <strTransmit>
      strTransmit(write_data, sizeof(write_data));
 8001006:	210e      	movs	r1, #14
 8001008:	481f      	ldr	r0, [pc, #124]	; (8001088 <FLASH_Main+0xc4>)
 800100a:	f7ff fd9f 	bl	8000b4c <strTransmit>
      strTransmit(read_data, sizeof(read_data));
 800100e:	210d      	movs	r1, #13
 8001010:	481e      	ldr	r0, [pc, #120]	; (800108c <FLASH_Main+0xc8>)
 8001012:	f7ff fd9b 	bl	8000b4c <strTransmit>
      strTransmit(erase, sizeof(erase));
 8001016:	2110      	movs	r1, #16
 8001018:	481d      	ldr	r0, [pc, #116]	; (8001090 <FLASH_Main+0xcc>)
 800101a:	f7ff fd97 	bl	8000b4c <strTransmit>
      strTransmit(write_protect, sizeof(write_protect));
 800101e:	2114      	movs	r1, #20
 8001020:	481c      	ldr	r0, [pc, #112]	; (8001094 <FLASH_Main+0xd0>)
 8001022:	f7ff fd93 	bl	8000b4c <strTransmit>
      strTransmit(remove_write_protect, sizeof(remove_write_protect));
 8001026:	211b      	movs	r1, #27
 8001028:	481b      	ldr	r0, [pc, #108]	; (8001098 <FLASH_Main+0xd4>)
 800102a:	f7ff fd8f 	bl	8000b4c <strTransmit>
      strTransmit(ob_unlock, sizeof(ob_unlock));
 800102e:	2117      	movs	r1, #23
 8001030:	481a      	ldr	r0, [pc, #104]	; (800109c <FLASH_Main+0xd8>)
 8001032:	f7ff fd8b 	bl	8000b4c <strTransmit>
      strTransmit(ob_lock, sizeof(ob_lock));
 8001036:	2115      	movs	r1, #21
 8001038:	4819      	ldr	r0, [pc, #100]	; (80010a0 <FLASH_Main+0xdc>)
 800103a:	f7ff fd87 	bl	8000b4c <strTransmit>
      strTransmit(line, sizeof(line));
 800103e:	212f      	movs	r1, #47	; 0x2f
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <FLASH_Main+0xb0>)
 8001042:	f7ff fd83 	bl	8000b4c <strTransmit>
      currentState = FLASH_WAIT_FOR_CMD;
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <FLASH_Main+0xac>)
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
      break;
 800104c:	e00e      	b.n	800106c <FLASH_Main+0xa8>
      if(0 != RxMessageLength)
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <FLASH_Main+0xe0>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d006      	beq.n	8001064 <FLASH_Main+0xa0>
        process_command();
 8001056:	f7ff fc07 	bl	8000868 <process_command>
        check_errors();
 800105a:	f7ff fba5 	bl	80007a8 <check_errors>
        RxMessageLength = 0;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <FLASH_Main+0xe0>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
      currentState = FLASH_WAIT_FOR_CMD;
 8001064:	4b02      	ldr	r3, [pc, #8]	; (8001070 <FLASH_Main+0xac>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
      break;
 800106a:	bf00      	nop
  }
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200002e4 	.word	0x200002e4
 8001074:	20000108 	.word	0x20000108
 8001078:	20000014 	.word	0x20000014
 800107c:	20000034 	.word	0x20000034
 8001080:	20000058 	.word	0x20000058
 8001084:	20000068 	.word	0x20000068
 8001088:	20000078 	.word	0x20000078
 800108c:	20000088 	.word	0x20000088
 8001090:	20000098 	.word	0x20000098
 8001094:	200000a8 	.word	0x200000a8
 8001098:	200000bc 	.word	0x200000bc
 800109c:	200000d8 	.word	0x200000d8
 80010a0:	200000f0 	.word	0x200000f0
 80010a4:	200003e8 	.word	0x200003e8

080010a8 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d008      	beq.n	80010cc <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 80010ca:	e007      	b.n	80010dc <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	801a      	strh	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <NVIC_SetPriorityGrouping>:
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <NVIC_SetPriorityGrouping+0x44>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8001110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <NVIC_SetPriorityGrouping+0x44>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <NVIC_EnableIRQ>:
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800113a:	4909      	ldr	r1, [pc, #36]	; (8001160 <NVIC_EnableIRQ+0x30>)
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	095b      	lsrs	r3, r3, #5
 8001142:	79fa      	ldrb	r2, [r7, #7]
 8001144:	f002 021f 	and.w	r2, r2, #31
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100

08001164 <NVIC_SetPriority>:
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	da0b      	bge.n	8001190 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001178:	490d      	ldr	r1, [pc, #52]	; (80011b0 <NVIC_SetPriority+0x4c>)
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	f003 030f 	and.w	r3, r3, #15
 8001180:	3b04      	subs	r3, #4
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	761a      	strb	r2, [r3, #24]
}
 800118e:	e009      	b.n	80011a4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001190:	4908      	ldr	r1, [pc, #32]	; (80011b4 <NVIC_SetPriority+0x50>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <NVIC_Init>:
#include "stm32f4xx_nvic.h"

void NVIC_Init()
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* Set priority group to 3
   * bits[3:0] are the sub-priority,
   * bits[7:4] are the pre-empt priority (0-15) */
  NVIC_SetPriorityGrouping(3);
 80011bc:	2003      	movs	r0, #3
 80011be:	f7ff ff93 	bl	80010e8 <NVIC_SetPriorityGrouping>

  /* Set priority levels */
  NVIC_SetPriority(SysTick_IRQn, 0);
 80011c2:	2100      	movs	r1, #0
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f7ff ffcc 	bl	8001164 <NVIC_SetPriority>
  NVIC_SetPriority(EXTI0_IRQn, 1);
 80011cc:	2101      	movs	r1, #1
 80011ce:	2006      	movs	r0, #6
 80011d0:	f7ff ffc8 	bl	8001164 <NVIC_SetPriority>
  NVIC_SetPriority(DMA1_Stream0_IRQn, 1);
 80011d4:	2101      	movs	r1, #1
 80011d6:	200b      	movs	r0, #11
 80011d8:	f7ff ffc4 	bl	8001164 <NVIC_SetPriority>
  NVIC_SetPriority(DMA1_Stream2_IRQn, 1);
 80011dc:	2101      	movs	r1, #1
 80011de:	200d      	movs	r0, #13
 80011e0:	f7ff ffc0 	bl	8001164 <NVIC_SetPriority>
  NVIC_SetPriority(DMA1_Stream4_IRQn, 1);
 80011e4:	2101      	movs	r1, #1
 80011e6:	200f      	movs	r0, #15
 80011e8:	f7ff ffbc 	bl	8001164 <NVIC_SetPriority>
  NVIC_SetPriority(DMA1_Stream6_IRQn, 1);
 80011ec:	2101      	movs	r1, #1
 80011ee:	2011      	movs	r0, #17
 80011f0:	f7ff ffb8 	bl	8001164 <NVIC_SetPriority>
  NVIC_SetPriority(DMA1_Stream7_IRQn, 1);
 80011f4:	2101      	movs	r1, #1
 80011f6:	202f      	movs	r0, #47	; 0x2f
 80011f8:	f7ff ffb4 	bl	8001164 <NVIC_SetPriority>
  NVIC_SetPriority(DMA2_Stream0_IRQn, 1);
 80011fc:	2101      	movs	r1, #1
 80011fe:	2038      	movs	r0, #56	; 0x38
 8001200:	f7ff ffb0 	bl	8001164 <NVIC_SetPriority>
  NVIC_SetPriority(DMA2_Stream3_IRQn, 1);
 8001204:	2101      	movs	r1, #1
 8001206:	203b      	movs	r0, #59	; 0x3b
 8001208:	f7ff ffac 	bl	8001164 <NVIC_SetPriority>
  NVIC_SetPriority(DMA2_Stream4_IRQn, 1);
 800120c:	2101      	movs	r1, #1
 800120e:	203c      	movs	r0, #60	; 0x3c
 8001210:	f7ff ffa8 	bl	8001164 <NVIC_SetPriority>
  NVIC_SetPriority(DMA2_Stream5_IRQn, 1);
 8001214:	2101      	movs	r1, #1
 8001216:	2044      	movs	r0, #68	; 0x44
 8001218:	f7ff ffa4 	bl	8001164 <NVIC_SetPriority>
  NVIC_SetPriority(DMA2_Stream7_IRQn, 1);
 800121c:	2101      	movs	r1, #1
 800121e:	2046      	movs	r0, #70	; 0x46
 8001220:	f7ff ffa0 	bl	8001164 <NVIC_SetPriority>
  NVIC_SetPriority(USART1_IRQn, 1);
 8001224:	2101      	movs	r1, #1
 8001226:	2025      	movs	r0, #37	; 0x25
 8001228:	f7ff ff9c 	bl	8001164 <NVIC_SetPriority>
  NVIC_SetPriority(UART5_IRQn, 1);
 800122c:	2101      	movs	r1, #1
 800122e:	2035      	movs	r0, #53	; 0x35
 8001230:	f7ff ff98 	bl	8001164 <NVIC_SetPriority>
  NVIC_SetPriority(TIM4_IRQn, 1);
 8001234:	2101      	movs	r1, #1
 8001236:	201e      	movs	r0, #30
 8001238:	f7ff ff94 	bl	8001164 <NVIC_SetPriority>
  NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1);
 800123c:	2101      	movs	r1, #1
 800123e:	202c      	movs	r0, #44	; 0x2c
 8001240:	f7ff ff90 	bl	8001164 <NVIC_SetPriority>
  NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1);
 8001244:	2101      	movs	r1, #1
 8001246:	202d      	movs	r0, #45	; 0x2d
 8001248:	f7ff ff8c 	bl	8001164 <NVIC_SetPriority>
  NVIC_SetPriority(ADC_IRQn, 1);
 800124c:	2101      	movs	r1, #1
 800124e:	2012      	movs	r0, #18
 8001250:	f7ff ff88 	bl	8001164 <NVIC_SetPriority>

  /* Enable interrupts at NVIC */
  NVIC_EnableIRQ(EXTI0_IRQn);
 8001254:	2006      	movs	r0, #6
 8001256:	f7ff ff6b 	bl	8001130 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800125a:	200b      	movs	r0, #11
 800125c:	f7ff ff68 	bl	8001130 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001260:	200d      	movs	r0, #13
 8001262:	f7ff ff65 	bl	8001130 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001266:	200f      	movs	r0, #15
 8001268:	f7ff ff62 	bl	8001130 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800126c:	2011      	movs	r0, #17
 800126e:	f7ff ff5f 	bl	8001130 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001272:	202f      	movs	r0, #47	; 0x2f
 8001274:	f7ff ff5c 	bl	8001130 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001278:	2038      	movs	r0, #56	; 0x38
 800127a:	f7ff ff59 	bl	8001130 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800127e:	203b      	movs	r0, #59	; 0x3b
 8001280:	f7ff ff56 	bl	8001130 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001284:	203c      	movs	r0, #60	; 0x3c
 8001286:	f7ff ff53 	bl	8001130 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800128a:	2044      	movs	r0, #68	; 0x44
 800128c:	f7ff ff50 	bl	8001130 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001290:	2046      	movs	r0, #70	; 0x46
 8001292:	f7ff ff4d 	bl	8001130 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(USART1_IRQn);
 8001296:	2025      	movs	r0, #37	; 0x25
 8001298:	f7ff ff4a 	bl	8001130 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(UART5_IRQn);
 800129c:	2035      	movs	r0, #53	; 0x35
 800129e:	f7ff ff47 	bl	8001130 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(TIM4_IRQn);
 80012a2:	201e      	movs	r0, #30
 80012a4:	f7ff ff44 	bl	8001130 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80012a8:	202c      	movs	r0, #44	; 0x2c
 80012aa:	f7ff ff41 	bl	8001130 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80012ae:	202d      	movs	r0, #45	; 0x2d
 80012b0:	f7ff ff3e 	bl	8001130 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(ADC_IRQn);
 80012b4:	2012      	movs	r0, #18
 80012b6:	f7ff ff3b 	bl	8001130 <NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <__libc_init_array>:
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	4e0d      	ldr	r6, [pc, #52]	; (80012f8 <__libc_init_array+0x38>)
 80012c4:	4c0d      	ldr	r4, [pc, #52]	; (80012fc <__libc_init_array+0x3c>)
 80012c6:	1ba4      	subs	r4, r4, r6
 80012c8:	10a4      	asrs	r4, r4, #2
 80012ca:	2500      	movs	r5, #0
 80012cc:	42a5      	cmp	r5, r4
 80012ce:	d109      	bne.n	80012e4 <__libc_init_array+0x24>
 80012d0:	4e0b      	ldr	r6, [pc, #44]	; (8001300 <__libc_init_array+0x40>)
 80012d2:	4c0c      	ldr	r4, [pc, #48]	; (8001304 <__libc_init_array+0x44>)
 80012d4:	f000 f818 	bl	8001308 <_init>
 80012d8:	1ba4      	subs	r4, r4, r6
 80012da:	10a4      	asrs	r4, r4, #2
 80012dc:	2500      	movs	r5, #0
 80012de:	42a5      	cmp	r5, r4
 80012e0:	d105      	bne.n	80012ee <__libc_init_array+0x2e>
 80012e2:	bd70      	pop	{r4, r5, r6, pc}
 80012e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012e8:	4798      	blx	r3
 80012ea:	3501      	adds	r5, #1
 80012ec:	e7ee      	b.n	80012cc <__libc_init_array+0xc>
 80012ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012f2:	4798      	blx	r3
 80012f4:	3501      	adds	r5, #1
 80012f6:	e7f2      	b.n	80012de <__libc_init_array+0x1e>
 80012f8:	08001320 	.word	0x08001320
 80012fc:	08001320 	.word	0x08001320
 8001300:	08001320 	.word	0x08001320
 8001304:	08001324 	.word	0x08001324

08001308 <_init>:
 8001308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130a:	bf00      	nop
 800130c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800130e:	bc08      	pop	{r3}
 8001310:	469e      	mov	lr, r3
 8001312:	4770      	bx	lr

08001314 <_fini>:
 8001314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001316:	bf00      	nop
 8001318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800131a:	bc08      	pop	{r3}
 800131c:	469e      	mov	lr, r3
 800131e:	4770      	bx	lr
